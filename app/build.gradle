plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-android-extensions'
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply from: "${rootProject.getRootDir()}/buildconfig/dependencies.gradle"

android {
    namespace 'com.bladoae.pokedex'
    compileSdk 33

    defaultConfig {
        applicationId "com.bladoae.pokedex"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        buildConfig = true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += 'META-INF/LICENSE.md'
            excludes += 'META-INF/LICENSE-notice.md'
        }
    }
}

dependencies {
    implementation project(':base')
    implementation project(':domain')
    implementation project(':data')

    project.base_dependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }

    project.base_presentation_dependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }

    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')

    //Compose
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    project.compose_dependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }

    project.ui_test_dependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }

    project.lifecycle_dependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }

    project.hilt_dependecies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }

    project.compose_dependecies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }

    project.glide_dependecies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }

    project.test_dependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }
}